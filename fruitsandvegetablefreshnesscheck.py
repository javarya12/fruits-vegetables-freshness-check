# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kRgP_djGIgou2NveM7Ci2s16OIFz3sFX
"""

pip install tensorflow

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions
import numpy as np

# Load the pre-trained MobileNetV2 model
model = tf.keras.applications.MobileNetV2(weights='imagenet', include_top=True)

# Function to classify the freshness of fruits and vegetables
def classify_freshness(image_path):
    img = image.load_img(image_path, target_size=(224, 224))  # Ensure images are resized to match the input size expected by MobileNetV2
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    predictions = model.predict(img_array)
    decoded_predictions = decode_predictions(predictions, top=1)[0]

    # You might need a mapping of classes to freshness labels depending on the dataset and how the model is trained
    # For example, using a dictionary: {'apple': 'fresh', 'orange': 'fresh', 'banana': 'stale', ...}
    # Adjust this mapping based on your dataset and model predictions

    # For demonstration, assuming the model predicts 'apple' or 'orange' as fresh and others as stale
    fresh_classes = ['apple', 'orange']

    if decoded_predictions[0][1] in fresh_classes:
        return "Fresh"
    else:
        return "Stale"

# Path to the image you want to classify
image_path = '/content/fruits/freshapple.15.20 PM.png'

# Classify the freshness of the provided image
result = classify_freshness(image_path)
print(f"The fruit/vegetable is {result}")

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np

# Function to classify the freshness of fruits and vegetables
def classify_freshness(image_path):
    img = image.load_img(image_path, target_size=(224, 224))  # Ensure images are resized to match the input size expected by MobileNetV2
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    predictions = model.predict(img_array)
    if predictions[0][0] > 0.5:
        return "Fresh"
    else:
        return "Stale"

# Load the pre-trained MobileNetV2 model
model = tf.keras.applications.MobileNetV2(weights='imagenet', include_top=True)

# Define data paths for training
train_dir = '/content/fruitandvege'
validation_dir = '/content/fruitandvege/fresh_apple'

# Define image parameters
img_height, img_width = 224, 224
batch_size = 32

# Create image data generators with augmentation for training and validation data
train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

validation_datagen = ImageDataGenerator(rescale=1.0/255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary'
)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary'
)

# Define and compile the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
import math

# Calculate steps per epoch using ceil division
steps_per_epoch = math.ceil(train_generator.samples / batch_size)
validation_steps = math.ceil(validation_generator.samples / batch_size)

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=steps_per_epoch,
    epochs=10,
    validation_data=validation_generator,
    validation_steps=validation_steps
)



# Save the trained model
model.save('freshness_classification_model.h5')

# Classify the freshness of the provided image
image_path = '/content/fruitandvege/fresh_apple/rotated_by_15_Screen Shot 2018-06-08 at 4.59.36 PM.png'
result = classify_freshness(image_path)
print(f"The fruit/vegetable is {result}")